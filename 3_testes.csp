datatype Medicamento = paracetamol | dipirona | dramin | buscopan | amoxilina
datatype Setor = UTI | maternidade | oncologia | pediatria | psiquiatria


REMEDIOS = Seq(Medicamento)
TABULEIRO_VAZIO = {(1, 1, 0), (1, 2, 0), (1, 3, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0)}


banco_de_dados = <(UTI, <paracetamol, dramin>), (maternidade, <dipirona, buscopan>), (oncologia, <paracetamol, amoxilina>), (pediatria, <buscopan, paracetamol>), (psiquiatria, <amoxilina, dramin>)>

channel inicia_software, evento_final, inicia_robo, inicia_gerenciamento
channel receber_medicamento: Medicamento
channel separar_medicamento: Medicamento
channel medicamento_separado: Medicamento

channel manipular_dados: REMEDIOS

OsRemedios((set, med)) = med

robo = inicia_robo -> separar_medicamento?var -> medicamento_separado.var -> evento_final -> robo

gerencia_de_dispensacao(<>, lista_de_medicamentos) = inicia_gerenciamento -> receber_medicamento?var -> separar_medicamento!var -> software_de_controle(lista_de_medicamentos)

software_de_controle(lista) = inicia_software -> manipular_dados?dados -> receber_medicamento!head(dados)-> gerencia_de_dispensacao(<head(dados)> ,tail(dados))

manda_chuva(BD) = inicia_software -> inicia_robo -> inicia_gerenciamento -> if BD != <> then manipular_dados!OsRemedios(head(BD)) -> evento_final -> manda_chuva(tail(BD))
                                                                            else evento_final -> manda_chuva(tail(BD))

-- Sincronizações
gerencia = gerencia_de_dispensacao(<>, <dramin>) [|{|separar_medicamento|}|] robo

processo_3 = gerencia [|{|receber_medicamento|}|] software_de_controle(OsRemedios((UTI, <dramin>))) 

assert processo_3 :[deadlock free [F]]
assert processo_3 :[deterministic]
assert processo_3 :[divergence free]

-- Testes
print head(<1, 2, 3>)
print OsRemedios(head(banco_de_dados))
print head(OsRemedios(head(banco_de_dados)))

print <dramin>